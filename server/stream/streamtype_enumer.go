// Code generated by "enumer -type=StreamType"; DO NOT EDIT.

package stream

import (
	"fmt"
)

const _StreamTypeName = "ST_UNKNOWNST_LOGINST_WORLDST_ZONEST_CHAT"

var _StreamTypeIndex = [...]uint8{0, 10, 18, 26, 33, 40}

func (i StreamType) String() string {
	if i >= StreamType(len(_StreamTypeIndex)-1) {
		return fmt.Sprintf("StreamType(%d)", i)
	}
	return _StreamTypeName[_StreamTypeIndex[i]:_StreamTypeIndex[i+1]]
}

var _StreamTypeValues = []StreamType{0, 1, 2, 3, 4}

var _StreamTypeNameToValueMap = map[string]StreamType{
	_StreamTypeName[0:10]:  0,
	_StreamTypeName[10:18]: 1,
	_StreamTypeName[18:26]: 2,
	_StreamTypeName[26:33]: 3,
	_StreamTypeName[33:40]: 4,
}

// StreamTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func StreamTypeString(s string) (StreamType, error) {
	if val, ok := _StreamTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to StreamType values", s)
}

// StreamTypeValues returns all values of the enum
func StreamTypeValues() []StreamType {
	return _StreamTypeValues
}

// IsAStreamType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i StreamType) IsAStreamType() bool {
	for _, v := range _StreamTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
